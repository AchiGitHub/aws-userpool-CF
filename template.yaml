AWSTemplateFormatVersion: 2010-09-09
Description: Cognito Stack

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment of this stack of resources

Mappings:
  UserPoolResourcesName:
    dev:
      envName: user-pool-dev
    staging:
      envName: user-pool-staging
    prod:
      envName: user-pool-prod

Resources:
  #Creates an Amazon Cognito user pool
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !FindInMap [UserPoolResourcesName, !Ref Environment, envName]
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: phone_number
          AttributeDataType: String
          Mutable: false
          Required: true
  #Specifies an Amazon Cognito user pool client
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: user-pool-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      AllowedOAuthFlows: 
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes: 
        - phone
        - email
        - openid
        - profile
      CallbackURLs: 
        - http://localhost:3000/authenticated
      DefaultRedirectURI: http://localhost:3000/authenticated
      LogoutURLs:
        - http://localhost:3000/signedout
      SupportedIdentityProviders:
        - COGNITO
  #Creates a new domain for a user pool
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !FindInMap [UserPoolResourcesName, !Ref Environment, envName]
      UserPoolId: !Ref UserPool
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Policy_api-lambda-db
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:TagResource'
                  - 'dynamodb:UntagResource'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
Outputs:
  UserPoolId:
    Value: !Ref !FindInMap [UserPoolResourcesName, !Ref Environment, envName]
    Export: 
      Name: "UserPool::Id"
  UserPoolClientId: 
    Value: !Ref UserPoolClient
    Export: 
      Name: "UserPoolClient::Id"
  UserPoolArn: 
    Value: !GetAtt !FindInMap [UserPoolResourcesName, !Ref Environment, envName].Arn
    Export: 
      Name: "UserPoolArn"
  IAMArn:
    Value: !GetAtt IAMRole.Arn
    Export: 
      Name: "IAM::ARN"